.global ISR_% !handlerSource %
.extern % !handlerIRQ %
.extern % !handlerIRQ %_ClearFlag
.extern end_interruption

/*---------------------------------------------------------------------------*/
ISR_% !handlerSource %:

    /*-------------------------------------------------------------------------
     * 1 - Reset the tpl_kern variables
     */
    la a5, tpl_kern
    sb zero, TPL_KERN_OFFSET_NEED_SWITCH(a5)
    sb zero, TPL_KERN_OFFSET_NEED_SCHEDULE(a5)

    /*-------------------------------------------------------------------------
     * 2 - Interrupt function call
     */
    jal % !handlerIRQ %
    jal % !handlerSource %_ClearFlag

    /*-------------------------------------------------------------------------
     * 3 - Check the context switch condition in tpl_kern
     */
    la a0, tpl_kern
    lb a6, TPL_KERN_OFFSET_NEED_SWITCH(a0)
    beq a6, zero, tpl_no_context_switch

    /*-------------------------------------------------------------------------
     * 4 - Save context
     *     Load in a0 the pointer to the static descriptor of the running task
     *     a0 already points to tpl_kern (from stage 3)
     */
    lw  a0, TPL_KERN_OFFSET_S_RUNNING(a0)
    lw  a0, 0(a0)
    jal tpl_save_context

    /*-------------------------------------------------------------------------
     * 5 - Call tpl_run_elected.
     *     The argument is a boolean which is true if the process is
     *     preempted. Here it is true because in an interrupt handler
     *     a process is inevitably preempted
     */
    li a0, 1
    jal tpl_run_elected

    /*----------------------------------------------------------------------o---
     * 6 - Load context
     *     Load in a0 the pointer to the context of the running task.
     *     It has been changed by tpl_run_elected
     */
    la  a0, tpl_kern
    lw  a0, TPL_KERN_OFFSET_S_RUNNING(a0)
    lw  a0, 0(a0)
    jal tpl_load_context

    la ra, end_interruption
    lw a7, 8(sp)
    lw a6, 4(sp)
    lw a5, 0(sp)
    addi sp, sp, 16
    ret