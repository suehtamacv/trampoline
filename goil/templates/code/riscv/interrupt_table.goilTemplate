#define OS_START_SEC_CODE
#include "tpl_memmap.h"
#include <utils.h>

extern uint32 tpl_leave_ie_untouched;

%

#------------------------------------------------------------------------------*
# Target specific initializations
# build the maps for IRQ
#
let INTERRUPTMAP := mapof INTERRUPT by NAME

let objForIRQ := @[]

# Map ISR into objForIRQ
foreach isr in ISR do
  let key := isr::SOURCE
  if not exists objForIRQ[key] then
    let objForIRQ[key] := @()
  end if
  let isr::KIND := "ISR"
  let isr::ACK := INTERRUPTMAP[key]::ACK
  let isr::VECT := INTERRUPTMAP[key]::VECT
  let objForIRQ[key] += isr
end foreach

# Map COUNTER into objForIRQ
foreach cnt in COUNTER do
  let key := cnt::SOURCE
  if not exists objForIRQ[key] then
    let objForIRQ[key] := @()
  end if
  let cnt::KIND := "COUNTER"
  let cnt::ACK := INTERRUPTMAP[key]::ACK
  let cnt::VECT := INTERRUPTMAP[key]::VECT
  let type := cnt::TYPE
  let objForIRQ[key] += cnt
end foreach

# Build the list of counters to call
let counterForIRQ := @[ ]

# Build a list of virtual objects (counters) each of them holding values :
# handlerSource, handlerName, handlerAck, generatePrimaryIrq
foreach objList in objForIRQ do
  foreach obj in objList do
    if (obj::KIND == "COUNTER") then
      if (obj::TYPE != "SOFTWARE") then
        let counterForIRQ[KEY] := @()
      end if 
    end if
  end foreach
  foreach obj in objList do
    if (obj::KIND == "COUNTER") then
      if (obj::TYPE != "SOFTWARE") then
        let  counterForIRQ[KEY] += obj::NAME
      end if
    end if
  end foreach
end foreach

#------------------------------------------------------------------------------*

let thereAreISR1 := false
foreach objList in objForIRQ do
  let objList_KEY := KEY
  foreach obj in objList do
    if obj::KIND == "ISR" then
      if obj::CATEGORY == 1 #& not thereAreISR1
      then
#        let thereAreISR1 := true
%extern FUNC(void, OS_CODE) % !obj::NAME %_function(void);
%
      end if
    end if
  end foreach
end foreach

#
# Build a map for interrupt sources
#
let it_map := [INTERRUPT mapBy: "NAME"]

let indexISR2 := 0
foreach objList in objForIRQ do
  let objList_KEY := KEY
%
FUNC(void, OS_CODE) % !objList_KEY %_ClearFlag(void)
{
    /* Clear pending register */
    if (tpl_leave_ie_untouched == 0) {
% foreach obj in objList do %
        ICP = (2 << % !obj::VECT %);
% end foreach %
    } 
}       
FUNC(void, OS_CODE) % !objList_KEY %_Handler(void)
{
%
  # ISR1
%
  /* ISR1s */
%
  foreach obj in objList do
    if obj::KIND == "ISR" then
      if obj::CATEGORY == 1 then
        if exists it_map[objList_KEY]::VECTOR_TYPE_S::TEMPLATE_S::NAME then
          template (it_map[objList_KEY],obj,DEVICE,DEVICE_KIND) if exists from
            it_map[objList_KEY]::VECTOR_TYPE_S::TEMPLATE_S::NAME or%
  %!obj::NAME %_function();%
          end template
        else%
  %!obj::NAME %_function();%
        end if
      end if
    end if
  end foreach

  # ISR2 and COUNTER
  # Test for ISR2
%
  /* ISR2s */
%
  let thereAreISR2forThisObjList := false
  foreach obj in objList do
    if obj::KIND == "ISR" then
      if obj::CATEGORY == 2 then
        let thereAreISR2forThisObjList := true
      end if
    end if
  end foreach

  if thereAreISR2forThisObjList then
    foreach obj in objList
      before
%  GET_CURRENT_CORE_ID(core_id)

#if WITH_STACK_MONITORING == YES
  GET_TPL_KERN_FOR_CORE_ID(core_id, kern)
  tpl_check_stack((tpl_proc_id)TPL_KERN_REF(kern).running_id);
#endif /* WITH_AUTOSAR_STACK_MONITORING */

%
      do
      if (obj::KIND == "ISR" & obj::CATEGORY == 2) then
        let repeated_priority_found := false
        let minPriority := 100000
        foreach objList2 in objForIRQ do
          foreach obj2 in objList2 do
            if (obj2::KIND == "ISR" & obj2::CATEGORY == 2) then
              if obj2::PRIORITY < minPriority then
                let minPriority := obj2::PRIORITY
              end if
              if (obj::VECT != obj2::VECT) then
                if obj::PRIORITY == obj2::PRIORITY then
                  let repeated_priority_found := true
                end if
              end if
            end if
          end foreach
        end foreach

        if repeated_priority_found == true then
%  tpl_central_interrupt_handler(% !([TASKS length] + indexISR2) %);
%
        else
%  tpl_central_interrupt_handler(% !([TASKS length] + obj::PRIORITY - minPriority) %);
%
        end if
        let indexISR2 := indexISR2 + 1
      end if
    end foreach
  end if

  # COUNTER
%  /* COUNTERs */
%
  foreach objCounter in counterForIRQ do
    let objCounter_KEY := KEY
    if (objCounter_KEY == objList_KEY) then
      %  tpl_tick_% !objCounter_KEY %();
%
    end if
  end foreach
  # ACK
%
  /* ACK */
%
  let ackDone := false
  foreach obj in objList do
    if not ackDone then
      if obj::ACK then
#        let ackDone := true
        if exists it_map[objList_KEY]::ACK_S::TEMPLATE_S::NAME then
          template (it_map[objList_KEY],obj,DEVICE,DEVICE_KIND) if exists from
            it_map[objList_KEY]::ACK_S::TEMPLATE_S::NAME or
%  %!objList_KEY%_ClearFlag();%
          end template
        else
%  %!objList_KEY%_ClearFlag();%
        end if        
      end if
    end if
  end foreach
%
}
%
end foreach
%
#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"
%

# vim:ft=goil_templates
